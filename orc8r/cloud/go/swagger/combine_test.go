/*
 Copyright 2020 The Magma Authors.

 This source code is licensed under the BSD-style license found in the
 LICENSE file in the root directory of this source tree.

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package swagger_test

import (
	"flag"
	"io/ioutil"
	"magma/orc8r/cloud/go/tools/swaggergen/generate"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"magma/orc8r/cloud/go/swagger"

	"github.com/hashicorp/go-multierror"
	"github.com/stretchr/testify/assert"
)

func init() {
	_ = flag.Set("alsologtostderr", "true") // uncomment to view logs during test
}

var (
	testdataDir    = "testdata"
	cfgsDir        = filepath.Join(testdataDir, "configs")
	commonFilepath = filepath.Join(testdataDir, "common/common.yml")
	outFilepath    = filepath.Join(testdataDir, "out.yml")
	goldenFilepath = filepath.Join(testdataDir, "out.yml.golden")

	nErrsFromCombine = 9
)

// TestCombine tests the generated output against a golden file.
// Golden file was generated by the combine_swagger command, then manually
// compared to go-swagger's mixin output of the same files, ensuring
// the golden file's correctness.
//
// go-swagger mixin: https://goswagger.io/usage/mixin.html
func TestCombine(t *testing.T){
	cleanup()
	defer cleanup()

	cfgFiles, err := getFilepaths(t, cfgsDir)
	assert.NoError(t, err)
	cfgsStr, commonStr := readSpecs(t, cfgFiles, commonFilepath)

	cfgs, common, err := swagger.Load(commonStr, cfgsStr)
	assert.NoError(t, err)

	combinedSpecs, errs := swagger.Combine(common, cfgs)
	assert.Error(t, errs)
	merrs, ok := errs.(*multierror.Error)
	assert.True(t, ok)
	assert.Len(t, merrs.Errors, nErrsFromCombine)

	write(combinedSpecs, outFilepath)

	expected := readFile(t, goldenFilepath)
	actual := readFile(t, outFilepath)
	assert.Equal(t, expected, actual)
}

func TestCombineStr(t *testing.T){
	cleanup()
	defer cleanup()

	cfgFiles, err := getFilepaths(t, cfgsDir)
	assert.NoError(t, err)
	cfgs, common := readSpecs(t, cfgFiles, commonFilepath)
	assert.NoError(t, err)

	combinedSpecsStr, errs := swagger.CombineStr(common, cfgs)

	assert.Error(t, errs)
	merrs, ok := errs.(*multierror.Error)
	assert.True(t, ok)
	assert.Len(t, merrs.Errors, nErrsFromCombine)

	output, err := swagger.UnmarshalFromYAML(combinedSpecsStr)
	assert.NoError(t, err)
	write(output, outFilepath)

	expected := readFile(t, goldenFilepath)
	actual := readFile(t, outFilepath)
	assert.Equal(t, expected, actual)
}

// cleanup cleans up created tmp files.
func cleanup() {
	_ = os.Remove(outFilepath)
}

func readSpecs(t *testing.T, cfgFiles []string, commonFile string) ([]string, string){
	cfgs := readFiles(t, cfgFiles)
	common := readFile(t, commonFile)
	return cfgs, common
}

// readFiles maps the passed filepaths to their contents.
func readFiles(t *testing.T, filepaths []string) ([]string) {
	var contents []string
	for _, path := range filepaths {
		s := readFile(t, path)
		contents = append(contents, s)
	}
	return contents
}

// readFile returns the content of the passed filepath.
func readFile(t *testing.T, filepath string) (string) {
	data, err := ioutil.ReadFile(filepath)
	assert.NoError(t, err)
	return string(data)
}

// getFilepaths returns the filepaths of each Swagger YAML file in or
// below inDir, in lexical order.
func getFilepaths(t *testing.T, inDir string) ([]string, error) {
	var filepaths []string
	err := filepath.Walk(inDir, func(path string, info os.FileInfo, err error) error {
		if strings.Contains(path, ".yml") {
			filepaths = append(filepaths, path)
		}
		return nil
	})
	return filepaths, err
}

func write(spec generate.SwaggerSpec, filepath string) error {
	strSpec, err := swagger.MarshalToYAML(spec)
	if err != nil {
		return err
	}

	f, err := os.Create(filepath)
	if err != nil {
		return err
	}

	defer f.Close()
	f.WriteString(strSpec)
	f.Sync()
	return nil
}