package swagger_test

import (
	"flag"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"magma/orc8r/cloud/go/swagger"

	"github.com/hashicorp/go-multierror"
	"github.com/stretchr/testify/assert"
)

func init() {
	_ = flag.Set("alsologtostderr", "true") // uncomment to view logs during test
}

var (
	testdataDir    = "testdata"
	cfgsDir        = filepath.Join(testdataDir, "configs")
	commonFilepath = filepath.Join(testdataDir, "common/common.yml")
	outFilepath    = filepath.Join(testdataDir, "out.yml")
	goldenFilepath = filepath.Join(testdataDir, "out.yml.golden")

	nErrsFromCombine = 9
)

// TestCombine tests the generated output against a golden file.
// Golden file was generated by the combine_swagger command, then manually
// compared to go-swagger's mixin output of the same files, ensuring
// the golden file's correctness.
//
// go-swagger mixin: https://goswagger.io/usage/mixin.html
func TestCombine(t *testing.T){
	cleanup()
	defer cleanup()

	cfgsList := getFilepaths(t, cfgsDir)
	cfgs, common, err := swagger.Load(commonFilepath, cfgsList)
	assert.NoError(t, err)

	combined, errs := swagger.Combine(common, cfgs)
	assert.Error(t, errs)
	merrs, ok := errs.(*multierror.Error)
	assert.True(t, ok)
	assert.Len(t, merrs.Errors, nErrsFromCombine)

	swagger.Write(combined, outFilepath)

	expected := readFile(t, goldenFilepath)
	actual := readFile(t, outFilepath)
	assert.Equal(t, expected, actual)
}

func TestCombineStr(t *testing.T){
	cleanup()
	defer cleanup()

	cfgs := getFilepaths(t, cfgsDir)
	outputFile, errs := swagger.CombineStr(commonFilepath, cfgs)

	assert.Error(t, errs)
	merrs, ok := errs.(*multierror.Error)
	assert.True(t, ok)
	assert.Len(t, merrs.Errors, nErrsFromCombine)

	expected := readFile(t, goldenFilepath)
	actual := readFile(t, outputFile)
	assert.Equal(t, expected, actual)
}

// cleanup cleans up created tmp files.
func cleanup() {
	_ = os.Remove(outFilepath)
}

// readFile returns the content of the passed filepath.
func readFile(t *testing.T, filepath string) string {
	data, err := ioutil.ReadFile(filepath)
	assert.NoError(t, err)
	return string(data)
}

// getFilepaths returns the filepaths of each Swagger YAML file in or
// below inDir, in lexical order.
func getFilepaths(t *testing.T, inDir string) []string {
	var filepaths []string
	err := filepath.Walk(inDir, func(path string, info os.FileInfo, err error) error {
		if strings.Contains(path, ".yml") {
			filepaths = append(filepaths, path)
		}
		return nil
	})
	assert.NoError(t, err)
	return filepaths
}